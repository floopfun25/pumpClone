-- Create the user_shares table to track content sharing
CREATE TABLE IF NOT EXISTS public.user_shares (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  content_url TEXT NOT NULL,
  platform TEXT NOT NULL,
  shared_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  
  -- A user can only share a specific URL to a specific platform once
  CONSTRAINT user_shares_unique_share UNIQUE (user_id, content_url, platform)
);

-- Add comments for clarity
COMMENT ON TABLE public.user_shares IS 'Tracks when a user shares a specific piece of content on a platform.';
COMMENT ON COLUMN public.user_shares.content_url IS 'The URL of the content that was shared.';
COMMENT ON COLUMN public.user_shares.platform IS 'The platform the content was shared on (e.g., twitter, telegram).';

-- Enable Row Level Security
ALTER TABLE public.user_shares ENABLE ROW LEVEL SECURITY;

-- RLS Policies
DROP POLICY IF EXISTS "Users can view and insert their own shares" ON public.user_shares;
CREATE POLICY "Users can view and insert their own shares"
ON public.user_shares FOR ALL
USING (auth.uid() = user_id);

-- Create an index for faster lookups
CREATE INDEX IF NOT EXISTS idx_user_shares_user_content ON public.user_shares(user_id, content_url);